{"version":3,"sources":["App.tsx","logo.svg","reportWebVitals.ts","index.tsx"],"names":["model","metadata","darkTheme","createMuiTheme","palette","primary","main","Colors","white","type","a","flag","undefined","tf","fetch","json","App","useState","text","setText","snackOpen","setSnackOpen","message","setMessage","handleSnackClose","event","reason","useEffect","loadModel","then","r","console","log","className","ThemeProvider","theme","Container","maxWidth","TextField","variant","multiline","fullWidth","onChange","target","value","Button","onClick","_event","SentimentThreshold","sentimentScore","paddedSequence","sequences","maxLen","padding","truncating","map","seq","length","splice","pad","i","push","concat","padSequences","trim","toLowerCase","replace","split","word","wordIndex","word_index","index_from","vocabulary_size","max_len","input","predictOut","predict","score","dataSync","dispose","getSentimentScore","textSentiment","toFixed","src","logo","alt","width","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","action","Fragment","IconButton","size","aria-label","color","fontSize","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ded5b3ef.chunk.js","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport React, {useEffect, useState} from 'react';\nimport {Button, Container, createMuiTheme, IconButton, Snackbar, TextField, ThemeProvider} from '@material-ui/core';\nimport * as Icons from '@material-ui/icons';\nimport * as Colors from '@material-ui/core/colors';\nimport * as tf from '@tensorflow/tfjs';\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    primary: {main: Colors.common.white},\n    type: \"dark\"\n  }\n});\n\nlet model, metadata;\n\nasync function loadModel() {\n  let flag = false;\n  if (model === undefined) {\n    model = await tf.loadLayersModel('https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/model.json');\n    flag = true;\n  }\n  if (metadata === undefined) {\n    metadata = await (await fetch('https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/metadata.json')).json();\n  }\n  return flag;\n}\n\nfunction padSequences(sequences, maxLen, padding = 'pre', truncating = 'pre', value = 0) {\n  return sequences.map(seq => {\n    if (seq.length > maxLen) {\n      if (truncating === 'pre') {\n        seq.splice(0, seq.length - maxLen);\n      } else {\n        seq.splice(maxLen, seq.length - maxLen);\n      }\n    }\n\n    if (seq.length < maxLen) {\n      const pad = [];\n      for (let i = 0; i < maxLen - seq.length; ++i) {\n        pad.push(value);\n      }\n      if (padding === 'pre') {\n        seq = pad.concat(seq);\n      } else {\n        seq = seq.concat(pad);\n      }\n    }\n\n    return seq;\n  });\n}\n\nfunction getSentimentScore(text) {\n  const inputText = text.trim().toLowerCase().replace(/([.,!])/g, '').split(' ');\n  // Convert the words to a sequence of word indices.\n  const sequence = inputText.map(word => {\n    let wordIndex = metadata.word_index[word] + metadata.index_from;\n    if (wordIndex > metadata.vocabulary_size) {\n      wordIndex = 2;\n    }\n    return wordIndex;\n  });\n  // Perform truncation and padding.\n  const paddedSequence = padSequences([sequence], metadata.max_len);\n  const input = tf.tensor2d(paddedSequence, [1, metadata.max_len]);\n\n  const predictOut = model.predict(input);\n  const score = predictOut.dataSync()[0];\n  predictOut.dispose();\n\n  return score;\n}\n\nfunction App() {\n  let [text, setText] = useState('');\n  let [snackOpen, setSnackOpen] = useState(false);\n  let [message, setMessage] = useState('');\n\n  function handleSnackClose(event, reason = '') {\n    if (reason === 'clickaway') return;\n    setSnackOpen(false);\n  }\n\n  function textUpdate(event: React.ChangeEvent<HTMLTextAreaElement>) {\n    setText(event.target.value);\n  }\n\n  function onClick(_event: React.MouseEvent<HTMLButtonElement>) {\n    if (text === '') {\n      setMessage(\"Please enter a message.\");\n      setSnackOpen(true);\n      return;\n    }\n    const SentimentThreshold = {\n      Positive: 0.66,\n      Neutral: 0.33,\n      Negative: 0\n    }\n\n    if (model !== undefined) {\n      setSnackOpen(false);\n      const sentimentScore = getSentimentScore(text);\n      let textSentiment = '';\n      if (sentimentScore > SentimentThreshold.Positive) {\n        textSentiment = 'positive';\n      } else if (sentimentScore > SentimentThreshold.Neutral) {\n        textSentiment = 'neutral';\n      } else if (sentimentScore >= SentimentThreshold.Negative) {\n        textSentiment = 'negative';\n      }\n      setMessage(\"That is a \" + textSentiment + \" remark! With a sentiment score of \" + sentimentScore.toFixed(4)*100 + \"%.\");\n      setSnackOpen(true);\n    }\n  }\n\n  useEffect(() => {\n    loadModel().then(r => {\n      if (r) console.log('Model loaded! ', metadata);\n    });\n  });\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ThemeProvider theme={darkTheme}>\n          <Container maxWidth=\"md\">\n            <TextField variant=\"filled\" multiline fullWidth onChange={textUpdate} value={text}/>\n          </Container>\n          <br/>\n          <Button variant=\"outlined\" onClick={onClick}>Process</Button>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" width=\"25%\"/>\n          <Snackbar\n            anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'left',\n            }}\n            open={snackOpen}\n            autoHideDuration={6000}\n            onClose={handleSnackClose}\n            message={message}\n            action={\n              <React.Fragment>\n                <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\">\n                  <Icons.Close fontSize=\"small\" onClick={handleSnackClose}/>\n                </IconButton>\n              </React.Fragment>\n            }\n          />\n        </ThemeProvider>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}